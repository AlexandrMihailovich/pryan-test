{"version":3,"sources":["store/store.js","store/reducers.js","components/LoadAnimation.js","components/Chart.js","store/actions.js","containers/ChartContainer.js","components/RadioSelector.js","containers/RadioContainer.js","App.js","serviceWorker.js","index.js"],"names":["createStore","state","arguments","length","undefined","action","type","Object","objectSpread","isLoading","hasError","data","selected","select","applyMiddleware","thunk","load","cn","LoadAnimation","react_default","a","createElement","className","item","Component","chart","monthNames","Chart","renderTooltip","_ref","active","payload","label","tooltip","date","Date","setTime","time","minutes","getMinutes","hours","getHours","fullDate","concat","getDate","getMonth","getFullYear","fullTime","_this","props","scale","high","low","renderLegend","legend","_this2","this","ticks","interval","day","year","month","i","Data","forEach","index","push","src_components_LoadAnimation","_this3","es6","width","height","margin","top","right","left","bottom","strokeDasharray","angle","tickFormatter","tickSize","domain","content","verticalAlign","dataKey","stroke","fill","loading","PureComponent","dataIsLoading","bool","dataHasErrored","fetchScale","dispatch","fetch","then","response","ok","Error","statusText","json","btcFetchDataSuccess","catch","ChartContainer","Chart_Chart","mapDispatchToProps","connect","radio","Radio","key","id","name","value","checked","onChange","change","htmlFor","map","RadioContainer","components_RadioSelector","container","App","es","store","containers_RadioContainer","containers_ChartContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4XAIA,IAQeA,cCZR,WAA6C,IAAvBC,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAARG,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAChD,OAAQC,EAAOC,MACX,IAAK,kBACD,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIQ,UAAWJ,EAAOI,UAClBC,UAAU,IAElB,IAAK,iBACD,OAAOH,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIQ,WAAW,EACXC,SAAUL,EAAOK,WAEzB,IAAK,yBACD,OAAOH,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIU,KAAMN,EAAOM,KACbF,WAAW,EACXC,UAAU,IAElB,IAAK,eACD,OAAOH,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIW,SAAUP,EAAOQ,SAGzB,QACI,OAAOZ,IDxBE,CACjBU,MAAM,EACNC,SAAU,QACVH,WAAW,EACXC,UAAU,GAOVI,YAAgBC,cEXdC,iBAAOC,aAAG,SAmBDC,mLAfP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,KACZG,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAAK,SAAU,CAACO,KAAK,MACrCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAAK,SAAU,CAACO,KAAK,MACrCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAAK,SAAU,CAACO,KAAK,MACrCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAAK,SAAU,CAACO,KAAK,MACrCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAAK,SAAU,CAACO,KAAK,MACrCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAAK,SAAU,CAACO,KAAK,MACrCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAAK,SAAU,CAACO,KAAK,MACrCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAAK,SAAU,CAACO,KAAK,cAXzBC,aCGtBC,EAAQR,aAAG,SAGXS,EAAa,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MACnD,MAAO,MAAO,MAAO,MAAO,MAAO,OAGlBC,6MAiCjBC,cAAgB,SAAAC,GAAgC,IAA7BC,EAA6BD,EAA7BC,OAAQC,EAAqBF,EAArBE,QAAqBF,EAAZG,MAChC,GAAIF,EAAQ,CACR,IAAMG,EAAUhB,aAAG,WAEfiB,EAAO,IAAIC,KACfD,EAAKE,QAAkC,IAA1BL,EAAQ,GAAGA,QAAQM,MAEhC,IAAIC,GAAWJ,EAAKK,aAAe,GAAK,IAAM,IAAML,EAAKK,aACrDC,GAASN,EAAKO,WAAa,GAAK,IAAM,IAAMP,EAAKO,WACjDC,EAAQ,GAAAC,OAAMT,EAAKU,UAAX,KAAAD,OAAwBT,EAAKW,WAAW,EAAxC,KAAAF,OAA6CT,EAAKY,eAC1DC,EAAQ,GAAAJ,OAAMH,EAAN,KAAAG,OAAeL,GAC3B,OACInB,EAAAC,EAAAC,cAAA,OAAKC,UAAWW,KACV,WAAO,GAAwB,SAArBe,EAAKC,MAAMC,MACnB,OAAQ/B,EAAAC,EAAAC,cAAA,KAAGC,UAAWW,EAAQ,UAAW,CAACC,MAAK,KAASa,GAD1D,GAEF5B,EAAAC,EAAAC,cAAA,KAAGC,UAAWW,EAAQ,UAAW,CAACC,MAAK,KAASQ,GAChDvB,EAAAC,EAAAC,cAAA,KAAGC,UAAWW,EAAQ,YAAtB,SAAAU,OAA4CZ,EAAQ,GAAGA,QAAQoB,KAA/D,MACAhC,EAAAC,EAAAC,cAAA,KAAGC,UAAWW,EAAQ,YAAtB,QAAAU,OAA2CZ,EAAQ,GAAGA,QAAQqB,IAA9D,OAKZ,OAAO,QAGXC,aAAe,SAACJ,GACZ,IAAMK,EAASrC,aAAG,UAClB,OACIE,EAAAC,EAAAC,cAAA,OAAKC,UAAWgC,KACZnC,EAAAC,EAAAC,cAAA,mGA5DJ,IAAAkC,EAAAC,KACAC,EAAQ,GAENC,EAAW,CACbC,IAAK,GACLC,KAAM,GACNC,MAAO,IAEPC,EAAI,EAQR,OAPAN,KAAKP,MAAMtC,KAAKoD,KAAKC,QAAQ,SAACzC,EAAM0C,GAC7BH,IAAMJ,EAASH,EAAKN,MAAMC,SACzBO,EAAMS,KAAKD,GACXH,EAAI,GAERA,MAEGL,wCAIGQ,GACV,IAAI/B,EAAO,IAAIC,KAOf,OANAD,EAAKE,QAA2C,IAAnCoB,KAAKP,MAAMtC,KAAKoD,KAAKE,GAAO5B,MACtB,CACfsB,IAAK,kBAAMzB,EAAKO,WAAa,IAAMP,EAAKK,aAAe,IAAML,EAAKU,UAAY,IAAMlB,EAAWQ,EAAKW,aACpGe,KAAM,kBAAMlC,EAAWQ,EAAKW,YAAc,IAAMX,EAAKY,eACrDe,MAAO,kBAAM3B,EAAKU,UAAY,IAAMlB,EAAWQ,EAAKW,cAEtCW,KAAKP,MAAMC,2CAsC7B,OACI/B,EAAAC,EAAAC,cAAA,OAAKC,UAAWG,EAAM,YAClBN,EAAAC,EAAAC,cAAC8C,EAAD,wCAIH,IAAAC,EAAAZ,KACL,OAAIA,KAAKP,MAAMtC,KAGZ6C,KAAKP,MAAMvC,SACFS,EAAAC,EAAAC,cAAA,qBAGRF,EAAAC,EAAAC,cAAA,OAAKC,UAAWG,KACZN,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAqBC,MAAM,OACNC,OAAQ,KACzBpD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACI1D,KAAM6C,KAAKP,MAAMtC,KAAKoD,KACtBS,OAAQ,CACJC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAGzCzD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAeQ,gBAAgB,QAC/B1D,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOZ,MAAOD,KAAKC,QACZqB,MAAO,GACPC,cAAe,SAAAjB,GAAC,OAAIM,EAAKW,cAAcjB,IACvCS,OAAQ,GACRS,SAAU,KAEjB7D,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOY,OAAQ,CAAC,aAAc,gBAC9B9D,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAASa,QAAS1B,KAAK5B,gBACvBT,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAQc,cAAc,MAAMZ,OAAQ,GAAIW,QAAS1B,KAAKH,eACtDlC,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAM/D,KAAK,WAAW8E,QAAS,QAASC,OAAO,UAAUC,KAAK,cAGrE9B,KAAKP,MAAMxC,UAAY+C,KAAK+B,UAAY,IA5BrCpE,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAC8C,EAAD,cA5EUqB,iBChB5B,SAASC,EAAcC,GAC1B,MAAO,CACHpF,KAAM,kBACNG,UAAWiF,GAIZ,SAASC,EAAeD,GAC3B,MAAO,CACHpF,KAAM,iBACNI,SAAUgF,GAoBX,SAASE,EAAW1C,GAEvB,OAAO,SAAC2C,GACJA,EAASJ,GAAc,IACvBI,EAVG,CACHvF,KAAM,eACNO,OAQqBqC,IAErB4C,MADU,6BAA6B5C,EAAM,SAExC6C,KAAK,SAACC,GACH,IAAKA,EAASC,GAEV,MADAJ,EAASF,GAAe,IAClBO,MAAMF,EAASG,YAEzB,OAAOH,EAASI,SAEnBL,KAAK,SAACpF,GACHkF,EA/BT,SAA6BlF,GAChC,MAAO,CACHL,KAAM,yBACNK,QA4BiB0F,CAAoB1F,IAC7BkF,EAASJ,GAAc,MAE1Ba,MAAM,kBAAMT,EAASF,GAAe,WC3C3CY,8LAEE/C,KAAKP,MAAM2C,WAAWpC,KAAKP,MAAMC,wCAGjC,OACI/B,EAAAC,EAAAC,cAACmF,EAAD,CAAO7F,KAAM6C,KAAKP,MAAMtC,KAAMuC,MAAOM,KAAKP,MAAMC,MACzCxC,SAAU8C,KAAKP,MAAMvC,SAAUD,UAAW+C,KAAKP,MAAMxC,mBAP3Ce,aAsBvBiF,EAAqB,CACvBb,cAGWc,cAbS,SAACzG,GACrB,MAAO,CACHiD,MAAOjD,EAAMW,SACbD,KAAMV,EAAMU,KACZF,UAAWR,EAAMQ,UACjBC,SAAUT,EAAMS,WAQgB+F,EAAzBC,CAA6CH,GC3BtDI,UAAQ1F,aAAG,UAwBF2F,+KArBNrF,EAAM0C,GAAO,IAAAjB,EAAAQ,KACd,OACIrC,EAAAC,EAAAC,cAAA,OAAKC,UAAWqF,EAAM,OAAQE,IAAK5C,GAC/B9C,EAAAC,EAAAC,cAAA,SAAOf,KAAK,QAAQwG,GAAIvF,EAAKwF,KAAO,IAAM9C,EACnC8C,KAAMxF,EAAKwF,KAAMC,MAAOzF,EAAKyF,MAC7BC,QAAS1F,EAAKyF,QAAUxD,KAAKP,MAAMrC,SACnCsG,SAAU,kBAAMlE,EAAKC,MAAMkE,OAAO5F,EAAKyF,UAE9C7F,EAAAC,EAAAC,cAAA,SAAO+F,QAAS7F,EAAKwF,KAAO,IAAM9C,GAAQ1C,EAAKS,yCAIlD,IAAAuB,EAAAC,KACL,OACIrC,EAAAC,EAAAC,cAAA,OAAKC,UAAWqF,EAAM,cAChBnD,KAAKP,MAAMtC,KAAK0G,IAAI,SAAC9F,EAAM0C,GAAP,OAAiBV,EAAKhC,KAAKA,EAAM0C,aAhBnDzC,aCDd8F,mLAmBE,OACInG,EAAAC,EAAAC,cAACkG,EAAD,CAAO5G,KAlBC,CACR,CACIoG,KAAM,QACN/E,MAAO,OACPgF,MAAO,QAEX,CACID,KAAM,QACN/E,MAAO,QACPgF,MAAO,SAEX,CACID,KAAM,QACN/E,MAAO,MACPgF,MAAO,QAIUG,OAAQ3D,KAAKP,MAAM2C,WAAYhF,SAAU4C,KAAKP,MAAMrC,kBApBxDY,aA+BvBiF,EAAqB,CACvBb,cAGWc,cAVS,SAACzG,GACrB,MAAO,CACHW,SAAUX,EAAMW,WAQgB6F,EAAzBC,CAA6CY,GC7BtDE,EAAYvG,aAAG,aAwBNwG,mLApBX,OACEtG,EAAAC,EAAAC,cAAA,OAAKC,UAAWkG,KACdrG,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAUC,MAAOA,GAEbxG,EAAAC,EAAAC,cAAA,MAAIC,UAAWkG,EAAU,WAAzB,oNAEArG,EAAAC,EAAAC,cAAA,OAAKC,UAAWkG,EAAU,WACtBrG,EAAAC,EAAAC,cAACuG,EAAD,OAGJzG,EAAAC,EAAAC,cAAA,OAAKC,UAAWkG,EAAU,UACtBrG,EAAAC,EAAAC,cAACwG,EAAD,gBAbErG,aCDEsG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjH,EAAAC,EAAAC,cAACgH,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC","file":"static/js/main.8bab35e1.chunk.js","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { scaleReducer } from './reducers';\r\n\r\nconst initialState = {\r\n    data: false,\r\n    selected: 'month',\r\n    isLoading: true,\r\n    hasError: true\r\n\r\n};\r\n\r\nexport default createStore(\r\n    scaleReducer,\r\n    initialState,\r\n    applyMiddleware(thunk))\r\n","export function scaleReducer(state = false, action) {\r\n    switch (action.type) {\r\n        case 'DATA_IS_LOADING':\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading,\r\n                hasError: false\r\n            };\r\n        case 'DATA_HAS_ERROR':\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                hasError: action.hasError\r\n            };\r\n        case 'BTC_FETCH_DATA_SUCCESS':\r\n            return {\r\n                ...state,\r\n                data: action.data,\r\n                isLoading: false,\r\n                hasError: false\r\n            };\r\n        case 'CHANGE_SCALE':\r\n            return {\r\n                ...state,\r\n                selected: action.select\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { cn } from '@bem-react/classname';\r\nimport './LoadAnimation.scss'\r\n\r\nconst load = cn('load');\r\n\r\nclass LoadAnimation extends Component {\r\n    render() {\r\n        return (\r\n            <div className={load()}>\r\n                <div className={load('circle', {item:1})}></div>\r\n                <div className={load('circle', {item:2})}></div>\r\n                <div className={load('circle', {item:3})}></div>\r\n                <div className={load('circle', {item:4})}></div>\r\n                <div className={load('circle', {item:5})}></div>\r\n                <div className={load('circle', {item:6})}></div>\r\n                <div className={load('circle', {item:7})}></div>\r\n                <div className={load('circle', {item:8})}></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoadAnimation;\r\n","import React, { PureComponent } from 'react';\r\nimport {\r\n    ResponsiveContainer, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n} from 'recharts';\r\nimport { cn } from '@bem-react/classname';\r\nimport './Chart.scss';\r\nimport './LoadAnimation'\r\nimport LoadAnimation from \"./LoadAnimation\";\r\n\r\nconst chart = cn('chart');\r\n\r\n\r\nconst monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\r\n];\r\n\r\nexport default class Chart extends PureComponent {\r\n\r\n    ticks() {\r\n        let ticks = [];\r\n\r\n        const interval = {\r\n            day: 60,\r\n            year: 30,\r\n            month: 48\r\n        };\r\n        let i = 0;\r\n        this.props.data.Data.forEach((item, index) => {\r\n            if(i === interval[this.props.scale]) {\r\n                ticks.push(index);\r\n                i = 0;\r\n            }\r\n            i++;\r\n        });\r\n        return ticks;\r\n    }\r\n\r\n\r\n    tickFormatter(index) {\r\n        let date = new Date();\r\n        date.setTime(this.props.data.Data[index].time * 1000);\r\n        const formatters = {\r\n            day: () => date.getHours() + ':' + date.getMinutes() + ' ' + date.getDate() + ' ' + monthNames[date.getMonth()],\r\n            year: () => monthNames[date.getMonth()] + ' ' + date.getFullYear(),\r\n            month: () => date.getDate() + ' ' + monthNames[date.getMonth()]\r\n        };\r\n        return formatters[this.props.scale]();\r\n    }\r\n\r\n    renderTooltip = ({ active, payload, label }) => {\r\n        if (active) {\r\n            const tooltip = cn('tooltip');\r\n\r\n            let date = new Date();\r\n            date.setTime(payload[0].payload.time * 1000);\r\n\r\n            let minutes = (date.getMinutes() < 10 ? '0' : '') + date.getMinutes();\r\n            let hours = (date.getHours() < 10 ? '0' : '') + date.getHours();\r\n            let fullDate = `${date.getDate()}.${date.getMonth()+1}.${date.getFullYear()}`;\r\n            let fullTime = `${hours}:${minutes}`;\r\n            return (\r\n                <div className={tooltip()}>\r\n                    {(() => {if(this.props.scale !== 'year')\r\n                        return (<p className={tooltip('content', {date:true})}>{fullTime}</p>)})()}\r\n                    <p className={tooltip('content', {date:true})}>{fullDate}</p>\r\n                    <p className={tooltip('content')}>{`High: ${payload[0].payload.high}$`}</p>\r\n                    <p className={tooltip('content')}>{`Low: ${payload[0].payload.low}$`}</p>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    };\r\n\r\n    renderLegend = (props) => {\r\n        const legend = cn('legend');\r\n        return (\r\n            <div className={legend()}>\r\n                <span>BTC to USD</span>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    loading() {\r\n        return (\r\n            <div className={chart('loading')}>\r\n                <LoadAnimation/>\r\n            </div>);\r\n    }\r\n\r\n    render() {\r\n        if(!this.props.data) {\r\n            return (<div><LoadAnimation/></div>);\r\n        }\r\n        if(this.props.hasError) {\r\n            return (<div>Error!</div>);\r\n        }\r\n        return (\r\n            <div className={chart()}>\r\n                <ResponsiveContainer width=\"100%\"\r\n                                     height={600}>\r\n                    <AreaChart\r\n                        data={this.props.data.Data}\r\n                        margin={{\r\n                            top: 5, right: 30, left: 20, bottom: 5,\r\n                        }}\r\n                    >\r\n                        <CartesianGrid strokeDasharray=\"5 5\" />\r\n                        <XAxis ticks={this.ticks()}\r\n                               angle={45}\r\n                               tickFormatter={i => this.tickFormatter(i)}\r\n                               height={70}\r\n                               tickSize={35}\r\n                        />\r\n                        <YAxis domain={['dataMin-15', 'dataMax+15']} />\r\n                        <Tooltip content={this.renderTooltip} />\r\n                        <Legend verticalAlign=\"top\" height={36} content={this.renderLegend}/>\r\n                        <Area type=\"monotone\" dataKey={'close'} stroke=\"#8884d8\" fill=\"#8884d8\" />\r\n                    </AreaChart>\r\n                </ResponsiveContainer>\r\n                {this.props.isLoading ? this.loading() : ''}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export function dataIsLoading(bool) {\r\n    return {\r\n        type: 'DATA_IS_LOADING',\r\n        isLoading: bool\r\n    };\r\n}\r\n\r\nexport function dataHasErrored(bool) {\r\n    return {\r\n        type: 'DATA_HAS_ERROR',\r\n        hasError: bool\r\n    };\r\n}\r\n\r\nexport function btcFetchDataSuccess(data) {\r\n    return {\r\n        type: 'BTC_FETCH_DATA_SUCCESS',\r\n        data\r\n    };\r\n}\r\n\r\n\r\n\r\nexport function changeScale(select) {\r\n    return {\r\n        type: 'CHANGE_SCALE',\r\n        select\r\n    };\r\n}\r\n\r\nexport function fetchScale(scale) {\r\n\r\n    return (dispatch) => {\r\n        dispatch(dataIsLoading(true));\r\n        dispatch(changeScale(scale));\r\n        let url = \"http://localhost:3000/btc-\"+scale+\".json\"\r\n        fetch(url)\r\n            .then((response) => {\r\n                if (!response.ok) {\r\n                    dispatch(dataHasErrored(true));\r\n                    throw Error(response.statusText);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then((data) => {\r\n                dispatch(btcFetchDataSuccess(data))\r\n                dispatch(dataIsLoading(false));\r\n            })\r\n            .catch(() => dispatch(dataHasErrored(true)));\r\n    };\r\n}\r\n","import React, { Component } from 'react';\r\nimport Chart from '../components/Chart';\r\nimport {fetchScale} from \"../store/actions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass ChartContainer extends Component {\r\n    componentDidMount() {\r\n        this.props.fetchScale(this.props.scale)\r\n    }\r\n    render() {\r\n        return (\r\n            <Chart data={this.props.data} scale={this.props.scale}\r\n                   hasError={this.props.hasError} isLoading={this.props.isLoading}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        scale: state.selected,\r\n        data: state.data,\r\n        isLoading: state.isLoading,\r\n        hasError: state.hasError\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchScale\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChartContainer);\r\n","import React, { Component } from 'react';\r\nimport { cn } from '@bem-react/classname';\r\nimport './RadioSelector.scss'\r\n\r\nconst radio = cn('radio');\r\n\r\nclass Radio extends Component {\r\n    item(item, index) {\r\n        return (\r\n            <div className={radio('btn')} key={index}>\r\n                <input type=\"radio\" id={item.name + '-' + index}\r\n                       name={item.name} value={item.value}\r\n                       checked={item.value === this.props.selected}\r\n                       onChange={() => this.props.change(item.value)}\r\n                />\r\n                <label htmlFor={item.name + '-' + index}>{item.label}</label>\r\n            </div>\r\n        );\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={radio('container')}>\r\n                {(this.props.data.map((item, index) => this.item(item, index)))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Radio;\r\n","import React, { Component } from 'react';\r\nimport Radio from '../components/RadioSelector';\r\nimport {fetchScale} from \"../store/actions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass RadioContainer extends Component {\r\n    render() {\r\n        let radios= [\r\n            {\r\n                name: 'scale',\r\n                label: 'Year',\r\n                value: 'year'\r\n            },\r\n            {\r\n                name: 'scale',\r\n                label: 'Month',\r\n                value: 'month'\r\n            },\r\n            {\r\n                name: 'scale',\r\n                label: 'Day',\r\n                value: 'day'\r\n            }\r\n        ];\r\n        return (\r\n            <Radio data={radios} change={this.props.fetchScale} selected={this.props.selected}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        selected: state.selected\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchScale\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RadioContainer);\r\n","import React, { Component } from 'react';\r\nimport { cn } from '@bem-react/classname';\r\nimport './App.scss';\r\n\r\nimport { Provider } from 'react-redux';\r\n\r\nimport store from './store/store'\r\n\r\nimport ChartContainer from './containers/ChartContainer';\r\nimport RadioContainer from './containers/RadioContainer'\r\n\r\nconst container = cn('container');\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className={container()}>\r\n        <Provider store={store}>\r\n\r\n            <h1 className={container(\"header\")}>Курс биткоина относительно доллара США</h1>\r\n\r\n            <div className={container(\"select\")}>\r\n                <RadioContainer/>\r\n                </div>\r\n\r\n            <div className={container(\"chart\")}>\r\n                <ChartContainer/>\r\n                </div>\r\n\r\n        </Provider>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}